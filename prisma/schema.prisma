// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  username   String?
  avatarUrl  String?
  role       String?     @default("user")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  accounts   Account[]
  sessions   Session[]
  userimages UserImage[]
}

model UserImage {
  id                 String   @id @default(cuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Totp {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Required fields.
  hash      String   @unique
  attempts  Int      @default(0)
  active    Boolean  @default(true)
  expiresAt DateTime
}

model Resume {
  id                     String                   @id @default(cuid())
  title                  String                   @unique
  phoneNumber            Int
  email                  String
  website                String
  location               String
  // (City, State, ZIP)
  summary                String
  professionalExperience ProfessionalExperience[]
  education              Education[]
  skills                 JobSkill[]
  publications           Publication[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model JobSkill {
  id        String   @id @default(cuid())
  skill     String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfessionalExperience {
  id        String   @id @default(cuid())
  title     String
  company   String
  location  String
  startDate String
  endDate   String
  duties    Duties[]
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Duties {
  id                       String                 @id @default(cuid())
  description              String
  professionalExperience   ProfessionalExperience @relation(fields: [professionalExperienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professionalExperienceId String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
}

model Education {
  id          String      @id @default(cuid())
  institution String
  degree      String
  field       String
  duties      eduDuties[]
  startDate   String
  endDate     String
  resume      Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model eduDuties {
  id          String    @id @default(cuid())
  description String
  education   Education @relation(fields: [educationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  educationId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Publication {
  id       String  @id @default(cuid())
  title    String
  year     String
  journal  String
  authors  String
  edition  String
  type     String
  url      String
  pdf      String?
  Resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId String?
}
